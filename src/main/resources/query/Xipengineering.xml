<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.red.xip.xipengineering.mapper.XipengineeringMapper">

	<select id="selectUsers" 
		parameterType = "com.red.xip.xipengineering.model.P_User"
		resultType="com.red.xip.xipengineering.model.R_User">
		<![CDATA[
			SELECT  M.LAST_NM,
			        M.FIRST_NM,
			        M.EMAIL,
			        DATE_FORMAT(M.CREAT_DT, '%y%m%d') AS CREAT_DT
			FROM    XIP_USERS AS M
			        INNER JOIN XIP_INCU AS X
			        ON  X.USER_CD = CAST(#{userCd}AS UNSIGNED)
			        AND X.EMAIL = #{email}
			WHERE   ( IFNULL(#{name}, '') = '' OR 
						M.FIRST_NM LIKE CONCAT('%', #{name}, '%') OR 
						M.LAST_NM LIKE CONCAT('%', #{name}, '%') )
			AND     DATE_FORMAT(M.CREAT_DT, '%Y%m%d') >= #{fromDt}
			AND     DATE_FORMAT(M.CREAT_DT, '%Y%m%d') <= #{toDt}
			ORDER BY  M.CREAT_DT DESC
		]]>
	</select>  
	
	<select id="selectOrders" 
		parameterType = "com.red.xip.xipengineering.model.P_Orders"
		resultType="com.red.xip.xipengineering.model.R_Orders">
		<![CDATA[
			SELECT  M.ORDER_CD,
			        DATE_FORMAT(M.ORDER_DT, '%Y-%m-%d %H:%i:%s') AS ORDER_DT,
			        CASE M.ORDER_STATUS 
			             WHEN '1' THEN '배송전'
			             WHEN '2' THEN '배송후'
			             WHEN '3' THEN '배송완료'
			             WHEN '0' THEN '취소요청'
			             WHEN '-1'THEN '취소완료' END AS ORDER_STATUS,
			        CASE WHEN M.CURRENCY = 'KRW' THEN TOTAL_AMOUNT 
			             ELSE '' END  AS KRW_TOTAL_AMOUNT,
			        CASE WHEN M.CURRENCY = 'KRW' THEN SHIPPING_AMOUNT 
			             ELSE '' END  AS KRW_SHIPPING_AMOUNT,
			        CASE WHEN M.CURRENCY = 'KRW' THEN TOTAL_AMOUNT - SHIPPING_AMOUNT 
			             ELSE '' END  AS KRW_SUB_TOTAL,
			        CASE WHEN M.CURRENCY = 'USD' THEN TOTAL_AMOUNT 
			             ELSE '' END  AS USD_TOTAL_AMOUNT,
			        CASE WHEN M.CURRENCY = 'USD' THEN SHIPPING_AMOUNT
			             ELSE '' END  AS USD_SHIPPING_AMOUNT,
			        CASE WHEN M.CURRENCY = 'USD' THEN TOTAL_AMOUNT - SHIPPING_AMOUNT
			             ELSE '' END  AS USD_SUB_TOTAL
			FROM    XIP_ORDER AS M
			        INNER JOIN XIP_INCU AS X
			        ON  X.USER_CD = CAST(#{userCd}AS UNSIGNED)
			        AND X.EMAIL = #{email}
			WHERE   CASE WHEN #{orderStatus} = '' THEN TRUE
					     ELSE M.ORDER_STATUS = #{orderStatus} END
			AND     DATE_FORMAT(M.ORDER_DT, '%Y%m%d') >= #{fromDt}
			AND     DATE_FORMAT(M.ORDER_DT, '%Y%m%d') <= #{toDt}
			ORDER BY  M.ORDER_DT DESC
		]]>
	</select>
	
	<select id="selectPurchaseOrder" 
		parameterType = "com.red.xip.xipengineering.model.P_PurchaseOrders"
		resultType="com.red.xip.xipengineering.model.R_PurchaseOrders">
		<![CDATA[
			SELECT  M.ORDER_CD,
			        CONCAT(U.FIRST_NM, ' ', U.LAST_NM) AS USER_NM,
			        U.EMAIL,
			        DATE_FORMAT(M.ORDER_DT, '%Y-%m-%d %H:%i:%s') AS ORDER_DT
			FROM    XIP_ORDER AS M
			        INNER JOIN XIP_INCU AS X 
			        ON  X.USER_CD = CAST(#{userCd}AS UNSIGNED)
			        AND X.EMAIL = #{email}
			        LEFT OUTER JOIN XIP_USERS AS U
			        ON  U.USER_CD = M.USER_CD
			WHERE   M.ORDER_STATUS = #{orderStatus}
			AND     DATE_FORMAT(M.ORDER_DT, '%Y%m%d') >= #{fromDt}
			AND     DATE_FORMAT(M.ORDER_DT, '%Y%m%d') <= #{toDt}
			ORDER BY  M.CREAT_DT DESC
		]]>
	</select>
	
	<select id="selectTrackingAdd" 
		parameterType = "com.red.xip.xipengineering.model.P_Tracking"
		resultType="com.red.xip.xipengineering.model.R_Tracking">
		<![CDATA[
			SELECT  M.SHIPPING_METHOD,
			        M.ADD_LAST_NM,
			        M.ADD_FIRST_NM,
			        M.PHONE,
			        IFNULL(M.COMPANY,'') AS COMPANY,
			        M.ADD_1,
			        M.ADD_2,
			        M.CITY,
			        M.ADD_COUNTRY,
			        M.STATE,
			        M.POSTAL_CD,
			        IFNULL(M.TRACKING_NUM, '') AS TRACKING_NUM
			FROM    XIP_ORDER AS M
			        INNER JOIN XIP_INCU AS X 
			        ON  X.USER_CD = CAST(#{userCd}AS UNSIGNED)
			        AND X.EMAIL = #{email}
			WHERE   M.ORDER_CD = CAST(#{orderCd}AS UNSIGNED)
		]]>
	</select>
	
	<select id="selectTrackingProd" 
		parameterType = "com.red.xip.xipengineering.model.P_Tracking"
		resultType="com.red.xip.xipengineering.model.TrackingProd">
		<![CDATA[
			SELECT  D.PROD_CD_D,
			        P.NAME,
			        CONCAT('Size : ',PD.PROD_SIZE) AS PROD_SIZE,
			        CONCAT('Amount : ',D.PROD_QTY) AS PROD_QTY
			FROM    XIP_ORDER_D AS D
			        INNER JOIN XIP_INCU AS X 
			        ON  X.USER_CD = CAST(#{userCd}AS UNSIGNED)
			        AND X.EMAIL = #{email}
			        INNER JOIN XIP_PROD_D AS PD
			        ON  PD.PROD_CD_D = D.PROD_CD_D
			        INNER JOIN XIP_PROD AS P
			        ON  P.PROD_CD = PD.PROD_CD
			WHERE   D.ORDER_CD = CAST(#{orderCd}AS UNSIGNED)
		]]>
	</select>
	
	<update id="updateTrackingNum" 
		parameterType = "com.red.xip.xipengineering.model.P_Tracking">
		<![CDATA[
			UPDATE  XIP_ORDER AS M
					INNER JOIN XIP_INCU AS X 
			        ON  X.USER_CD = CAST(#{userCd}AS UNSIGNED)
			        AND X.EMAIL = #{email}
			   SET  M.TRACKING_NUM = #{trackingNum},
			        M.ORDER_STATUS='2',
			        M.SHIP_DT = NOW()
			WHERE   ORDER_CD = CAST(#{orderCd}AS UNSIGNED)
		]]>
	</update>
	
	<select id="selectShipInfo" 
		parameterType = "com.red.xip.xipengineering.model.P_Tracking"
		resultType="com.red.xip.xipengineering.model.R_ShipInfo">
		<![CDATA[
			SELECT  CONCAT('#XIP-',M.ORDER_CD) AS ORDER_CD,
			        M.SHIPPING_METHOD,
			        M.TRACKING_NUM,
			        CONCAT(M.ADD_FIRST_NM, ' ' ,M.ADD_LAST_NM) AS ADD_NM,
			        M.ADD_1,
			        M.ADD_2,
			        CONCAT(M.CITY,', ', M.STATE, ', ', M.POSTAL_CD, ', ', M.ADD_COUNTRY) AS CITY_POSTAL,
			        CASE M.CURRENCY
			             WHEN 'KRW' THEN CONCAT( '₩', FORMAT(TOTAL_AMOUNT,0) )
			             WHEN 'USD' THEN CONCAT( '$', FORMAT(TOTAL_AMOUNT,0) )    
			             ELSE '' END AS TOTAL_AMOUNT,
			        CASE M.CURRENCY
			             WHEN 'KRW' THEN CONCAT( '₩', FORMAT(SHIPPING_AMOUNT,0) )
			             WHEN 'USD' THEN CONCAT( '$', FORMAT(SHIPPING_AMOUNT,0) )    
			             ELSE '' END AS SHIPPING_AMOUNT,
			        CASE M.CURRENCY
			             WHEN 'KRW' THEN CONCAT( '₩', FORMAT(TOTAL_AMOUNT - SHIPPING_AMOUNT,0) )
			             WHEN 'USD' THEN CONCAT( '$', FORMAT(TOTAL_AMOUNT - SHIPPING_AMOUNT,0) )    
			             ELSE '' END AS SUB_TOTAL
			FROM    XIP_ORDER AS M
			        INNER JOIN XIP_INCU AS X 
			        ON  X.USER_CD = CAST(#{userCd}AS UNSIGNED)
			        AND X.EMAIL = #{email}
			WHERE   M.ORDER_CD = CAST(#{orderCd}AS UNSIGNED)
		]]>
	</select>
	
	<select id="selectShipEmail" 
		parameterType = "com.red.xip.xipengineering.model.P_Tracking"
		resultType="String">
		<![CDATA[
			SELECT  U.EMAIL
			FROM    XIP_ORDER AS M
			        INNER JOIN XIP_INCU AS X 
			        ON  X.USER_CD = CAST(#{userCd}AS UNSIGNED)
			        AND X.EMAIL = #{email}
			        LEFT OUTER JOIN XIP_USERS AS U
			        ON  U.USER_CD = M.USER_CD
			WHERE   M.ORDER_CD = CAST(#{orderCd}AS UNSIGNED)
		]]>
	</select>
	
	<select id="selectShipDetails" 
		parameterType = "com.red.xip.xipengineering.model.P_Tracking"
		resultType="com.red.xip.xipengineering.model.R_ShipDetails">
		<![CDATA[	
			SELECT  P.NAME,
			        CONCAT('Size: ',PD.PROD_SIZE) AS PROD_SIZE,
			        CONCAT('Amount: ', M.PROD_QTY) AS PROD_QTY
			FROM    XIP_ORDER_D AS M
			        INNER JOIN XIP_INCU AS X 
			        ON  X.USER_CD = CAST(#{userCd}AS UNSIGNED)
			        AND X.EMAIL = #{email}
			        INNER JOIN XIP_PROD_D AS PD 
			        ON  PD.PROD_CD_D = M.PROD_CD_D
			        INNER JOIN XIP_PROD AS P
			        ON  P.PROD_CD = PD.PROD_CD
			WHERE   M.ORDER_CD = CAST(#{orderCd}AS UNSIGNED)
		]]>
	</select>
	
	<select id="selectShipped" 
		parameterType = "com.red.xip.xipengineering.model.P_Shipped"
		resultType="com.red.xip.xipengineering.model.R_Shipped">
		<![CDATA[	
			SELECT  M.ORDER_CD,
			        CONCAT(U.FIRST_NM, ' ', U.LAST_NM) AS USER_NM,
			        U.EMAIL,
			        DATE_FORMAT(M.ORDER_DT, '%Y-%m-%d %H:%i:%s') AS ORDER_DT,
			        CONCAT(M.ADD_FIRST_NM, ' ' ,M.ADD_LAST_NM) AS ADD_NM,
			        DATE_FORMAT(M.SHIP_DT, '%Y-%m-%d %H:%i:%s') AS SHIP_DT,
			        M.TRACKING_NUM
			FROM    XIP_ORDER AS M
			        INNER JOIN XIP_INCU AS X
			        ON  X.USER_CD = CAST(#{userCd}AS UNSIGNED)
			        AND X.EMAIL = #{email}
			        LEFT OUTER JOIN XIP_USERS AS U 
			        ON  U.USER_CD = M.USER_CD
			WHERE   M.ORDER_STATUS IN ('2','3')
			AND     DATE_FORMAT(M.ORDER_DT, '%Y%m%d') >= #{fromDt}
			AND     DATE_FORMAT(M.ORDER_DT, '%Y%m%d') <= #{toDt}
			AND     U.EMAIL LIKE CONCAT('%', #{userEmail},'%')
			ORDER BY  M.ORDER_DT DESC
		]]>
	</select>
	
	<select id="selectCancelling" 
		parameterType = "com.red.xip.xipengineering.model.P_Cancelling"
		resultType="com.red.xip.xipengineering.model.R_Cancelling">
		<![CDATA[	
			SELECT  M.ORDER_CD,
					CASE M.ORDER_STATUS 
			             WHEN '1' THEN '배송전'
			             WHEN '2' THEN '배송후'
			             WHEN '0' THEN '취소요청' END AS ORDER_STATUS,
			        CONCAT(U.FIRST_NM, ' ', U.LAST_NM) AS USER_NM,
			        U.EMAIL,
			        DATE_FORMAT(M.ORDER_DT, '%Y-%m-%d %H:%i:%s') AS ORDER_DT,
			        CONCAT(M.ADD_FIRST_NM, ' ' ,M.ADD_LAST_NM) AS ADD_NM,
			        CASE M.CURRENCY
			             WHEN 'KRW' THEN CONCAT( '₩', FORMAT(M.TOTAL_AMOUNT,0) )
			             WHEN 'USD' THEN CONCAT( '$', FORMAT(M.TOTAL_AMOUNT,0) )    
			             ELSE '' END AS TOTAL_AMOUNT,
			        CASE M.CURRENCY
			             WHEN 'KRW' THEN CONCAT( '₩', FORMAT(M.SHIPPING_AMOUNT,0) )
			             WHEN 'USD' THEN CONCAT( '$', FORMAT(M.SHIPPING_AMOUNT,0) )    
			             ELSE '' END AS SHIPPING_AMOUNT,
			        CASE M.CURRENCY
			             WHEN 'KRW' THEN CONCAT( '₩', FORMAT(M.TOTAL_AMOUNT - M.SHIPPING_AMOUNT,0) )
			             WHEN 'USD' THEN CONCAT( '$', FORMAT(M.TOTAL_AMOUNT - M.SHIPPING_AMOUNT,0) )    
			             ELSE '' END AS SUB_TOTAL
			FROM    XIP_ORDER AS M
			        INNER JOIN XIP_INCU AS X
			        ON  X.USER_CD = CAST(#{userCd}AS UNSIGNED)
			        AND X.EMAIL = #{email}
			        LEFT OUTER JOIN XIP_USERS AS U 
			        ON  U.USER_CD = M.USER_CD
			WHERE   M.ORDER_STATUS = #{orderStatus}
			AND     DATE_FORMAT(M.ORDER_DT, '%Y%m%d') >= #{fromDt}
			AND     DATE_FORMAT(M.ORDER_DT, '%Y%m%d') <= #{toDt}
			AND     U.EMAIL LIKE CONCAT('%', #{userEmail},'%')
			ORDER BY  M.ORDER_DT DESC
		]]>
	</select>
	
	<select id="selectDetailCancelling" 
		parameterType = "com.red.xip.xipengineering.model.P_Cancelling"
		resultType="com.red.xip.xipengineering.model.R_DetailCancelling">
		<![CDATA[	
			SELECT  D.PROD_CD_D,
			        P.NAME,
			        PD.PROD_SIZE,
			        D.PROD_QTY,
			        CASE M.CURRENCY
			             WHEN 'KRW' THEN D.ORDER_PRICE
			             WHEN 'USD' THEN D.ORDER_PRICE     
			             ELSE 0 END * D.PROD_QTY AS PRICE,
			        M.CURRENCY
			FROM    XIP_ORDER AS M
			        INNER JOIN XIP_INCU AS X
			        ON  X.USER_CD = CAST(#{userCd}AS UNSIGNED)
			        AND X.EMAIL = #{email}
			        INNER JOIN XIP_ORDER_D AS D 
			        ON  D.ORDER_CD = M.ORDER_CD
			        INNER JOIN XIP_PROD_D AS PD
			        ON  PD.PROD_CD_D = D.PROD_CD_D
			        INNER JOIN XIP_PROD AS P
			        ON  P.PROD_CD = PD.PROD_CD
			WHERE   M.ORDER_CD = CAST(#{orderCd}AS UNSIGNED)
		]]>
	</select>
	
	<update id="updateCancelStatus" 
		parameterType = "com.red.xip.xipengineering.model.P_Cancelling">
		<![CDATA[
			UPDATE  XIP_ORDER AS M
			        INNER JOIN XIP_INCU AS X
			        ON  X.USER_CD = CAST(#{userCd}AS UNSIGNED)
			        AND X.EMAIL = #{email}
			   SET  ORDER_STATUS = '-1'
			WHERE   M.ORDER_CD = CAST(#{orderCd}AS UNSIGNED)
		]]>
	</update>
	
	<insert id="insertCancel" 
		parameterType = "com.red.xip.xipengineering.model.P_Cancelling">
		<![CDATA[
			INSERT INTO XIP_CANCEL (
			    ORDER_CD,
			    IDEMPOTENCY_KEY,
			    CURRENCY,
			    CANCEL_AMOUNT,
			    REASON,
			    CREAT_DT,
			    MODIFY_DT
			)
			SELECT  M.ORDER_CD,
					#{idempotencyKey} AS IDEMPOTENCY_KEY, 
					M.CURRENCY,
					#{cancelAmount} AS CANCEL_AMOUNT,
					#{reason} AS REASON,
					NOW(),
					NOW()
			FROM    XIP_ORDER AS M
					INNER JOIN XIP_INCU AS X
			        ON  X.USER_CD = CAST(#{userCd}AS UNSIGNED)
			        AND X.EMAIL = #{email}
			        LEFT OUTER JOIN XIP_CANCEL AS C
                    ON  C.ORDER_CD = M.ORDER_CD 
			WHERE   M.ORDER_CD = CAST(#{orderCd}AS UNSIGNED)
			AND     M.TOTAL_AMOUNT >= #{cancelAmount}
			AND     C.ORDER_CD IS NULL  
		]]>
	</insert>
	
	<select id="selectCanceled" 
		parameterType = "com.red.xip.xipengineering.model.P_Canceled"
		resultType="com.red.xip.xipengineering.model.R_Canceled">
		<![CDATA[	
			SELECT  M.ORDER_CD,
			        CONCAT(U.FIRST_NM, ' ', U.LAST_NM) AS USER_NM,
			        U.EMAIL,
			        DATE_FORMAT(M.ORDER_DT, '%Y-%m-%d %H:%i:%s') AS ORDER_DT,
			        DATE_FORMAT(C.CREAT_DT, '%Y-%m-%d %H:%i:%s') AS CANCEL_DT,
			        CASE C.CURRENCY
			             WHEN 'KRW' THEN CONCAT( '₩', FORMAT(C.CANCEL_AMOUNT,0) )
			             WHEN 'USD' THEN CONCAT( '$', FORMAT(C.CANCEL_AMOUNT,0) )    
			             ELSE '' END AS CANCEL_AMOUNT,
			        CASE M.CURRENCY
			             WHEN 'KRW' THEN CONCAT( '₩', FORMAT(M.TOTAL_AMOUNT,0) )
			             WHEN 'USD' THEN CONCAT( '$', FORMAT(M.TOTAL_AMOUNT,0) )    
			             ELSE '' END AS TOTAL_AMOUNT,
			        CASE M.CURRENCY
			             WHEN 'KRW' THEN CONCAT( '₩', FORMAT(M.SHIPPING_AMOUNT,0) )
			             WHEN 'USD' THEN CONCAT( '$', FORMAT(M.SHIPPING_AMOUNT,0) )    
			             ELSE '' END AS SHIPPING_AMOUNT,
			        CASE M.CURRENCY
			             WHEN 'KRW' THEN CONCAT( '₩', FORMAT(M.TOTAL_AMOUNT - M.SHIPPING_AMOUNT,0) )
			             WHEN 'USD' THEN CONCAT( '$', FORMAT(M.TOTAL_AMOUNT - M.SHIPPING_AMOUNT,0) )    
			             ELSE '' END AS SUB_TOTAL
			FROM    XIP_CANCEL AS C
			        INNER JOIN XIP_INCU AS X
			        ON  X.USER_CD = CAST(#{userCd}AS UNSIGNED)
			        AND X.EMAIL = #{email}
			        INNER JOIN XIP_ORDER AS M 
			        ON  C.ORDER_CD = M.ORDER_CD
			        INNER JOIN XIP_USERS AS U
			        ON  U.USER_CD = M.USER_CD 
			WHERE   M.ORDER_STATUS = '-1'
			AND     DATE_FORMAT(M.ORDER_DT, '%Y%m%d') >= #{fromDt}
			AND     DATE_FORMAT(M.ORDER_DT, '%Y%m%d') <= #{toDt}
			AND     U.EMAIL LIKE CONCAT('%', #{userEmail},'%')
			ORDER BY  M.ORDER_DT DESC
		]]>
	</select>
	
	<select id="selectProdOrder" 
		parameterType = "com.red.xip.xipengineering.model.P_ProdOrder"
		resultType="com.red.xip.xipengineering.model.R_ProdOrder">
		<![CDATA[	
			SELECT  PD.PROD_CD_D,
			        P.NAME,
			        PD.PROD_SIZE,
			        CASE WHEN CONCAT('|',P.SIZE_OPT,'|') LIKE CONCAT('%|',PD.PROD_SIZE,'|%') THEN '사용중'
			        	 ELSE '사용안함' END SIZE_STATUS,
			        PD.SOLD_QTY,
			        PD.TOTAL_QTY,
			        PD.TOTAL_QTY - PD.SOLD_QTY AS STOCK_QTY,
			        SUM(IFNULL(O.PROD_QTY,0)) AS PROD_QTY,
        			SUM(IFNULL(O.CANCEL_QTY,0)) AS CANCEL_QTY,
			        SUM(CASE WHEN O.CURRENCY = 'KRW' THEN IFNULL(O.ORDER_PRICE,0)  * IFNULL(O.PROD_QTY,0)
			             ELSE 0 END)  AS KRW_SUB_TOTAL,
			        SUM(CASE WHEN O.CURRENCY = 'USD' THEN IFNULL(O.ORDER_PRICE,0)  * IFNULL(O.PROD_QTY,0) 
			             ELSE 0 END)  AS USD_SUB_TOTAL
			FROM    XIP_PROD_D AS PD 
			        INNER JOIN XIP_INCU AS X
			        ON  X.USER_CD = CAST(#{userCd}AS UNSIGNED)
			        AND X.EMAIL = #{email}
			        INNER JOIN XIP_PROD AS P
			        ON  P.PROD_CD = PD.PROD_CD
			        LEFT OUTER JOIN (
			            SELECT  M.ORDER_CD,
			                    CASE WHEN M.ORDER_STATUS != '-1' THEN D.PROD_QTY ELSE 0 END AS PROD_QTY,
                    			CASE WHEN M.ORDER_STATUS = '-1' THEN D.PROD_QTY ELSE 0 END AS CANCEL_QTY,
			                    M.CURRENCY,
			                    D.PROD_CD_D,
			                    D.ORDER_PRICE
			            FROM    XIP_ORDER AS M
			                    INNER JOIN XIP_ORDER_D AS D
			                    ON  D.ORDER_CD = M.ORDER_CD
			            WHERE   DATE_FORMAT(M.ORDER_DT, '%Y%m%d') >= #{fromDt}
						AND     DATE_FORMAT(M.ORDER_DT, '%Y%m%d') <= #{toDt}
			        ) AS O
			        ON  O.PROD_CD_D = PD.PROD_CD_D
			WHERE   CASE WHEN IFNULL(#{sizeStatus},'') = '' THEN TRUE
			             ELSE CONCAT('|',P.SIZE_OPT,'|') LIKE CONCAT('%|',PD.PROD_SIZE,'|%') END
			AND     CASE WHEN IFNULL(#{season},'') = '' THEN TRUE ELSE P.SEASON = #{season} END
			AND     CASE WHEN IFNULL(#{searchProdCd},'') = '' THEN TRUE 
						 ELSE PD.PROD_CD_D LIKE CONCAT('%',#{searchProdCd},'%') OR 
						      P.PROD_CD LIKE CONCAT('%',#{searchProdCd},'%') END
			GROUP BY PD.PROD_CD_D, P.NAME, PD.PROD_SIZE, SOLD_QTY, TOTAL_QTY, STOCK_QTY
		]]>
	</select>
	<update id="updateProdOrder" 
		parameterType = "com.red.xip.xipengineering.model.P_NewProd">
		<![CDATA[
			UPDATE  XIP_PROD_D
					INNER JOIN XIP_INCU AS X
			        ON  X.USER_CD = CAST(#{userCd}AS UNSIGNED)
			        AND X.EMAIL = #{email}
			   SET  SOLD_QTY = #{soldQty},
			        TOTAL_QTY = #{totalQty}     
			WHERE   PROD_CD_D = #{prodCd} 
		]]>
	</update>
	
	<insert id="insertProd" 
		parameterType = "com.red.xip.xipengineering.model.P_NewProd">
		<![CDATA[
			INSERT INTO  XIP_PROD (
			    PROD_CD,
			    NAME,
			    PRICE,
			    US_PRICE,
			    SIZE_OPT,
			    STATUS,
			    LINE,
			    SEASON,
			    PROD_DESC,
			    PROD_DESC_D,
			    IMAGE_SRC,
			    CREAT_DT,
			    MODIFY_DT
			)
			VALUES (
			    #{prodCd},
			    #{name},
			    #{price},
			    #{usPrice},
			    #{sizeOpt},
			    '-1',
			    #{line},
			    #{season},
			    #{prodDesc},
			    #{prodDescD},
			    #{imageSrc},
			    NOW(),
			    NOW()
			)
			ON DUPLICATE KEY UPDATE 
			NAME = #{name},
		    PRICE = #{price},
		    US_PRICE = #{usPrice},
		    SIZE_OPT = #{sizeOpt},
		    STATUS = '-1',
		    LINE = #{line},
		    SEASON = #{season},
		    PROD_DESC = #{prodDesc},
		    PROD_DESC_D = #{prodDescD},
		    IMAGE_SRC = #{imageSrc}
		]]>
	</insert>
	
	<insert id="insertProdD" 
		parameterType = "com.red.xip.xipengineering.model.P_NewProd">
		<![CDATA[
			INSERT INTO XIP_PROD_D(
				PROD_CD_D,
				PROD_CD,
				PROD_SIZE,
				SOLD_QTY,
				TOTAL_QTY,
				CREAT_DT,
				MODIFY_DT
			)
			VALUES
		]]>
		<foreach collection="list" item="item" separator=",">
            (#{item.prodCdD}, #{item.prodCd}, #{item.prodSize}, 0, 0, NOW(), NOW())
        </foreach>
        ON DUPLICATE KEY UPDATE 
		PROD_CD = VALUES(PROD_CD),
        PROD_SIZE = VALUES(PROD_SIZE),
        SOLD_QTY = VALUES(SOLD_QTY),
        TOTAL_QTY = VALUES(TOTAL_QTY)
	</insert>
	
	<insert id="insertProdDImg" 
		parameterType = "com.red.xip.xipengineering.model.P_NewProd">
		<![CDATA[
			INSERT INTO XIP_IMAGE(
				IMAGE_CD,
				IMG_SRC
			)
			VALUES (
			    #{prodCd},
			    #{prodDSrc}
			)
			ON DUPLICATE KEY UPDATE 
	        IMG_SRC = #{prodDSrc}
		]]>
		
	</insert>
	
	<select id="selectSeason" 
		parameterType = "com.red.xip.xipengineering.model.P_ProdStatus"
		resultType="com.red.xip.xipengineering.model.R_ProdStatus">
		<![CDATA[	
			SELECT  P.SEASON
            FROM    XIP_PROD AS P
            		INNER JOIN XIP_INCU AS X
			        ON  X.USER_CD = CAST(#{userCd}AS UNSIGNED)
			        AND X.EMAIL = #{email}
            GROUP BY P.SEASON
		]]>
	</select>  
	
	<select id="selectProdStatus" 
		parameterType = "com.red.xip.xipengineering.model.P_ProdStatus"
		resultType="com.red.xip.xipengineering.model.R_ProdStatus">
		<![CDATA[	
			SELECT  P.PROD_CD, 
					P.NAME, 
					P.PRICE, 
					P.US_PRICE, 
					P.SIZE_OPT,
					P.STATUS,
					P.PROD_DESC, 
					P.PROD_DESC_D
            FROM    XIP_PROD AS P
            		INNER JOIN XIP_INCU AS X
			        ON  X.USER_CD = CAST(#{userCd}AS UNSIGNED)
			        AND X.EMAIL = #{email}
            WHERE   ( IFNULL(#{season},'') = '' OR P.SEASON = #{season} )
            AND     ( IFNULL(#{line},'') = '' OR P.LINE = #{line} )
            AND     ( IFNULL(#{name},'') = '' 
                      OR P.NAME LIKE CONCAT('%',#{name},'%') 
                      OR P.PROD_CD LIKE CONCAT('%',#{name},'%') )
		]]>
	</select>  
	
	<update id="updateProdDesc" 
		parameterType = "com.red.xip.xipengineering.model.P_ProdStatus">
		<![CDATA[
			UPDATE  XIP_PROD AS P
					INNER JOIN XIP_INCU AS X
			        ON  X.USER_CD = CAST(#{userCd}AS UNSIGNED)
			        AND X.EMAIL = #{email}
			   SET  P.PROD_DESC = #{prodDesc},
			        P.PROD_DESC_D = #{prodDescD}     
			WHERE   P.PROD_CD = #{prodCd} 
		]]>
	</update>
	
	<update id="updateProd" 
		parameterType = "com.red.xip.xipengineering.model.P_ProdStatus">
		<![CDATA[
			UPDATE  XIP_PROD AS P
					INNER JOIN XIP_INCU AS X
			        ON  X.USER_CD = CAST(#{userCd}AS UNSIGNED)
			        AND X.EMAIL = #{email}
			   SET  P.NAME = #{name},
			        P.PRICE = #{price},
			        P.US_PRICE = #{usPrice},
			        P.SIZE_OPT = #{sizeOpt},
			        P.STATUS = #{status}     
			WHERE   P.PROD_CD = #{prodCd} 
		]]>
	</update>
	
	<select id="selectCancelPayInfo" 
		parameterType = "com.red.xip.xipengineering.model.P_Cancelling"
		resultType="com.red.xip.xipengineering.model.R_PayCancel">
		<![CDATA[	
			SELECT  C.CANCEL_AMOUNT, C.REASON AS CANCEL_REASON, C.CURRENCY, R.PAYMENT_KEY, IDEMPOTENCY_KEY
            FROM    XIP_CANCEL AS C 
                    INNER JOIN XIP_ORDER AS R
                    ON  R.ORDER_CD = C.ORDER_CD
            WHERE   C.ORDER_CD = CAST(#{orderCd}AS UNSIGNED)
		]]>
	</select>  
	
</mapper>